const mongoose = require('mongoose');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
mongoose.connect('mongodb+srv://shayetet14:sdg5NrhmPFak8T3y@cluster0.2g7xxjp.mongodb.net/love?retryWrites=true&w=majority&appName=Cluster0', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const User = require('./models/User');

async function updateUserRoles() {
  try {
    console.log('üîÑ Starting user role updates...');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin
    const allUsers = await User.find({ role: { $ne: 'admin' } }).sort({ createdAt: 1 });
    console.log(`üìä Found ${allUsers.length} non-admin users`);
    
    if (allUsers.length === 0) {
      console.log('‚ùå No users found to update');
      return;
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á premium ‡πÄ‡∏õ‡πá‡∏ô Silver ‡∏Å‡πà‡∏≠‡∏ô
    const premiumUsers = await User.find({ role: 'premium' });
    console.log(`üîÑ Converting ${premiumUsers.length} premium users to Silver...`);
    
    for (const user of premiumUsers) {
      await User.findByIdAndUpdate(user._id, { role: 'Silver' }, { 
        validateBeforeSave: false 
      });
      console.log(`‚úÖ Converted ${user.username} from premium to Silver`);
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á premium
    const updatedUsers = await User.find({ role: { $ne: 'admin' } }).sort({ createdAt: 1 });
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà
    const roleDistribution = [
      { role: 'VIP', count: 20 },
      { role: 'VIP1', count: 15 },
      { role: 'VIP2', count: 10 },
      { role: 'Gold', count: 20 },
      { role: 'Silver', count: 30 },
      { role: 'Diamond', count: 10 },
      { role: 'Platinum', count: 5 }
    ];
    
    let currentIndex = 0;
    let processedCount = 0;
    
    console.log('\nüìù Role distribution plan:');
    roleDistribution.forEach(item => {
      console.log(`${item.role}: ${item.count} users`);
    });
    console.log(`Total planned: ${roleDistribution.reduce((sum, item) => sum + item.count, 0)} users`);
    console.log(`Available users: ${updatedUsers.length} users\n`);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô
    for (const roleInfo of roleDistribution) {
      console.log(`üîÑ Assigning ${roleInfo.role} role to ${roleInfo.count} users...`);
      
      for (let i = 0; i < roleInfo.count && currentIndex < updatedUsers.length; i++) {
        const user = updatedUsers[currentIndex];
        
        await User.findByIdAndUpdate(user._id, { role: roleInfo.role }, { 
          validateBeforeSave: false 
        });
        
        console.log(`‚úÖ ${user.username} (${user.memberId}) -> ${roleInfo.role}`);
        currentIndex++;
        processedCount++;
      }
      
      if (currentIndex >= updatedUsers.length) {
        console.log('‚ö†Ô∏è  Reached end of user list');
        break;
      }
    }
    
    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô user ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    const remainingUsers = updatedUsers.slice(currentIndex);
    if (remainingUsers.length > 0) {
      console.log(`\nüîÑ Setting ${remainingUsers.length} remaining users as 'user'...`);
      for (const user of remainingUsers) {
        await User.findByIdAndUpdate(user._id, { role: 'user' }, { 
          validateBeforeSave: false 
        });
        console.log(`‚úÖ ${user.username} (${user.memberId}) -> user`);
        processedCount++;
      }
    }
    
    console.log(`\n‚úÖ Role update completed!`);
    console.log(`üìà Total users processed: ${processedCount}`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä Final role distribution:');
    const finalStats = await User.aggregate([
      { $match: { role: { $ne: 'admin' } } },
      { $group: { _id: '$role', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    
    finalStats.forEach(stat => {
      console.log(`${stat._id}: ${stat.count} users`);
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    console.log('\nüë• Sample users by role:');
    for (const roleInfo of roleDistribution) {
      const sampleUsers = await User.find({ role: roleInfo.role })
        .select('username memberId role')
        .limit(3)
        .lean();
      
      if (sampleUsers.length > 0) {
        console.log(`\n${roleInfo.role}:`);
        sampleUsers.forEach(user => {
          console.log(`  - ${user.username} (${user.memberId})`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error updating user roles:', error);
  } finally {
    mongoose.disconnect();
    console.log('\nüîå Database connection closed');
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
updateUserRoles();
