const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./models/User');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect('mongodb+srv://shayetet14:sdg5NrhmPFak8T3y@cluster0.2g7xxjp.mongodb.net/love?retryWrites=true&w=majority&appName=Cluster0', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(async () => {
  console.log('‚úÖ MongoDB Connected Successfully!');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á shayetet14 account ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    const shayetetData = {
      username: 'kao',
      email: 'shayetet14@protonmail.com',
      password: await bcrypt.hash('password123', 10), // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      firstName: 'Kao',
      lastName: 'Shayetet',
      age: 28,
      role: 'premium', // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô premium ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
      status: 'active',
      verified: true,
      location: 'Bangkok',
      interests: ['Technology', 'Gaming', 'Music'],
      createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000), // 60 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (account ‡πÄ‡∏Å‡πà‡∏≤)
      lastLogin: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    };

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ account ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await User.findOne({ 
      $or: [{ email: 'shayetet14@protonmail.com' }, { username: 'kao' }] 
    });
    
    if (!existingUser) {
      const newUser = await User.create(shayetetData);
      console.log('‚úÖ Restored shayetet14@protonmail.com account successfully!');
      console.log(`   - Username: ${newUser.username}`);
      console.log(`   - Email: ${newUser.email}`);
      console.log(`   - Name: ${newUser.firstName} ${newUser.lastName}`);
      console.log(`   - Role: ${newUser.role}`);
      console.log(`   - Default Password: password123`);
    } else {
      console.log('‚ö†Ô∏è Account already exists:');
      console.log(`   - Username: ${existingUser.username}`);
      console.log(`   - Email: ${existingUser.email}`);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const allUsers = await User.find({}, 'username email firstName lastName role status verified');
    console.log('\nüîç All Users After Restore:');
    allUsers.forEach(user => {
      const statusIcon = user.status === 'active' ? '‚úÖ' : user.status === 'banned' ? '‚ùå' : '‚ö†Ô∏è';
      const verifiedIcon = user.verified ? '‚úì' : '‚úó';
      console.log(`- ${user.firstName} ${user.lastName} (${user.email}) - ${user.username} - ${user.role} - ${user.status} ${statusIcon} ${verifiedIcon}`);
    });

    const totalUsers = await User.countDocuments();
    console.log(`\nüìä Total Users: ${totalUsers}`);

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    mongoose.connection.close();
    console.log('üì¥ Connection closed');
    process.exit(0);
  }
})
.catch(err => {
  console.error('‚ùå MongoDB Connection Error:', err);
  process.exit(1);
});
